---
import Layout from '../layouts/Layout.astro';
import SearchBox from '../components/SearchBox.astro';
import ResultsGrid from '../components/ResultsGrid.astro';
import { bardicNames } from '../data/bardicNames';
import { getLangFromUrl, useTranslations } from '../i18n/ui';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const ITEMS_PER_PAGE = 39;
const VISIBLE_PAGES = 10;
const currentPage = Number(Astro.url.searchParams.get('page')) || 1;
const totalPages = Math.ceil(bardicNames.length / ITEMS_PER_PAGE);

// Calculate visible page range
const halfVisible = Math.floor(VISIBLE_PAGES / 2);
let startPage = Math.max(currentPage - halfVisible, 1);
let endPage = Math.min(startPage + VISIBLE_PAGES - 1, totalPages);

// Adjust start if we're near the end
if (endPage - startPage + 1 < VISIBLE_PAGES) {
  startPage = Math.max(endPage - VISIBLE_PAGES + 1, 1);
}

// Get records for current page
const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const endIndex = startIndex + ITEMS_PER_PAGE;
const currentRecords = bardicNames.slice(startIndex, endIndex);

// Helper function for pagination URLs
const getPageUrl = (page: number) => {
  const baseUrl = lang === 'cy' ? '/data-bardic' : '/data-bardic/en';
  return page === 1 ? baseUrl : `${baseUrl}?page=${page}`;
};
---

<Layout title={t('site.title')}>
  <main class="min-h-screen bg-gray-50 py-8 px-4">
    <h1 class="text-4xl font-bold text-center mb-8">
      <span class="text-red-600">{t('site.title')}</span>
    </h1>
    
    <SearchBox locale={lang} />
    <ResultsGrid records={currentRecords} locale={lang} />
    
    <div class="flex justify-center mt-8">
      <nav aria-label="Pagination" class="inline-flex">
        {/* Previous page */}
        <a
          href={currentPage > 1 ? getPageUrl(currentPage - 1) : '#'}
          class={`px-4 py-2 text-sm font-medium border rounded-l-lg ${
            currentPage <= 1
              ? 'text-gray-400 bg-gray-100 cursor-not-allowed'
              : 'text-gray-700 bg-white hover:bg-gray-50'
          }`}
        >
          {t('pagination.previous')}
        </a>
        
        {/* First page */}
        {startPage > 1 && (
          <>
            <a
              href={getPageUrl(1)}
              class="px-4 py-2 text-sm font-medium border-t border-b border-gray-300 text-gray-700 bg-white hover:bg-gray-50"
            >
              1
            </a>
            {startPage > 2 && (
              <span class="px-4 py-2 text-sm font-medium border-t border-b border-gray-300 text-gray-700 bg-white">
                ...
              </span>
            )}
          </>
        )}
        
        {/* Visible page numbers */}
        {[...Array(endPage - startPage + 1)].map((_, i) => {
          const pageNum = startPage + i
          return (
          <a
            href={getPageUrl(pageNum)}
            class={`px-4 py-2 text-sm font-medium border-t border-b ${
              currentPage === pageNum
                ? 'text-white bg-red-600 border-red-600'
                : 'text-gray-700 bg-white hover:bg-gray-50 border-gray-300'
            }`}
          >
            {pageNum}
          </a>
          )
        })}
        
        {/* Last page */}
        {endPage < totalPages && (
          <>
            {endPage < totalPages - 1 && (
              <span class="px-4 py-2 text-sm font-medium border-t border-b border-gray-300 text-gray-700 bg-white">
                ...
              </span>
            )}
            <a
              href={getPageUrl(totalPages)}
              class="px-4 py-2 text-sm font-medium border-t border-b border-gray-300 text-gray-700 bg-white hover:bg-gray-50"
            >
              {totalPages}
            </a>
          </>
        )}

        {/* Next page */}
        <a
          href={currentPage < totalPages ? getPageUrl(currentPage + 1) : '#'}
          class={`px-4 py-2 text-sm font-medium border rounded-r-lg ${
            currentPage >= totalPages
              ? 'text-gray-400 bg-gray-100 cursor-not-allowed'
              : 'text-gray-700 bg-white hover:bg-gray-50'
          }`}
        >
          {t('pagination.next')}
        </a>
      </nav>
    </div>
  </main>
</Layout>