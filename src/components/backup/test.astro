---
// Define the props that this component expects
export interface Props {
  currentLang: 'cy' | 'en';
}

const { currentLang } = Astro.props;
// 1) Get the build-time BASE_URL
const base = import.meta.env.BASE_URL || '/';

// 2) Compute the per-language bard base path
const bardPath = currentLang === 'cy' ? 'bardd/' : 'en/bard/';

// 3) Your read-more labels
const readMoreText = {
  cy: 'Gweld manylion',
  en: 'View details'
};
---
<div
  id="search-container"
  data-readmore={readMoreText[currentLang]}
  data-base={base}
  data-lang={currentLang}
  data-bardpath={bardPath}
  class="w-full max-w-2xl mx-auto mb-8 p-6 bg-white rounded-lg shadow-md p-6 bg-white rounded-lg shadow-md"
>
  <input 
    type="search" 
    id="search"
    placeholder="Search bardic records..." 
    class="w-full px-4 py-2 text-gray-900 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
    minlength="3"
  />
  <div id="suggestions" class="absolute z-10 w-full max-w-2xl bg-white border border-gray-200 rounded-lg shadow-lg mt-1 hidden">
  </div>
</div>

<script>
 // Pull them off the container
  const container = document.getElementById('search-container');
  const readMore  = container.dataset.readmore;   // "Gweld manylion" or "View details"
  const baseUrl   = container.dataset.base;       // e.g. "/"
  const baselang   = container.dataset.lang;       // e.g. "/"
  const bardPath  = container.dataset.bardpath;   // "bardd/" or "en/bard/"
  console.log('readMoreText is:', readMore, 'baseurl: ', baseUrl , 'Bardpath' ,bardPath, baselang);

  import lunr from 'lunr';
  import bardicNamesData from '../files/bardicNames.json';
  import searchIndex from '../data/search-index.json';
  const BardicRecord = bardicNamesData;
  
 // Load the pre-built index
  const idx = lunr.Index.load(searchIndex);

  // DOM elements
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const suggestionsDiv = document.getElementById('suggestions');
  const resultsGrid = document.getElementById('results-grid');

  // Initialize with first 20 records
  if (resultsGrid) {
    resultsGrid.innerHTML = renderResults(BardicRecord.slice(0, 20));
  }

  // Search functionality
  searchInput?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value.trim();
    
    if (query.length < 3) {
      suggestionsDiv?.classList.add('hidden');
      if (resultsGrid) {
        resultsGrid.innerHTML = renderResults(BardicRecord.slice(0, 20));
      }
      return;
    }

    try {
      const results = idx.search(query + '*');
      const searchResults = results.map(r => BardicRecord.find(b => b.id === r.ref)).filter(Boolean);
      
      // Update suggestions
      if (searchResults.length > 0) {
        suggestionsDiv?.classList.remove('hidden');
        suggestionsDiv!.innerHTML = searchResults.slice(0, 4).map(record => `
          <div class="p-2 hover:bg-gray-100 cursor-pointer suggestion-item">
            <div class="font-medium">${record["BARDIC NAMES"] || record.Surname || 'Unknown'}</div>
            <div class="text-sm text-gray-600">${record["TOWN VILLAGE"] || ''}</div>
          </div>
        `).join('');

        // Update main results grid
        if (resultsGrid) {
          resultsGrid.innerHTML = renderResults(searchResults);
        }
      } else {
        suggestionsDiv?.classList.add('hidden');
        if (resultsGrid) {
          resultsGrid.innerHTML = `
            <div class="col-span-full text-center py-8 text-gray-500">
              No results found for "${query}"
            </div>
          `;
        }
      }
    } catch (error) {
      console.error('Search error:', error);
    }
  });

  // Handle suggestion clicks
  suggestionsDiv?.addEventListener('click', (e) => {
    const suggestionItem = (e.target as HTMLElement).closest('.suggestion-item');
    if (suggestionItem) {
      const name = suggestionItem.querySelector('.font-medium')?.textContent || '';
      if (searchInput) {
        searchInput.value = name;
        searchInput.dispatchEvent(new Event('input'));
      }
      suggestionsDiv.classList.add('hidden');
    }
  });

  // Close suggestions when clicking outside
  document.addEventListener('click', (e) => {
    if (!suggestionsDiv?.contains(e.target as Node) && e.target !== searchInput) {
      suggestionsDiv?.classList.add('hidden');
    }
  });

  // Helper function to render results grid
 function renderResults(records) {
  return records.map(record => {
    // 1) Build the name heading (only if present)
    const nameHeading = record['BARDIC NAMES']
      ? `<h3 class="text-lg font-semibold text-primary-600 mb-1">
           ${record['BARDIC NAMES']}
         </h3>`
      : '';

    // 2) Build the subtitle line (first names + surname)
    const subTitle = `<p class="text-secondary-700 text-sm mb-2">
                        ${record['FIRST NAMES'] || ''} ${record.Surname || ''}
                      </p>`;

    // 3) Membership badge
    const badge = `<span class="inline-flex items-center px-2.5 py-0.5 rounded-full \
text-xs font-medium bg-primary-100 text-primary-800">
                     ${record['TYPE OF MEMEBERSHIP'] || ''}
                   </span>`;

    // 4) Location line (conditionally)
    let locationLine = '';
    if (record['TOWN VILLAGE'] && record['TOWN VILLAGE'] !== 'Unknown') {
      const label = baselang === 'cy' ? 'Lleoliad:' : 'Location:';
      locationLine = `<p>
                        <span class="font-medium">${label}</span>
                        ${record['TOWN VILLAGE']}
                      </p>`;
    }

    // 5) Date-admitted line (conditionally)
    let dateLine = '';
    if (record['DATE ADMITTED']) {
      const label = baselang === 'cy' ? 'Dyddiad Derbyn:' : 'Date Admitted:';
      dateLine = `<p>
                    <span class="font-medium">${label}</span>
                    ${record['DATE ADMITTED']}
                  </p>`;
    }

    // 6) Read-more link
    const bardUrl = `${baseUrl}${bardPath}${record.id}`;
    const readMoreLabel = baselang === 'cy' ? 'Gweld manylion' : 'View details';
    const readMoreLink = `
      <div class="mt-4 pt-4 border-t border-secondary-200">
        <a href="${bardUrl}"
           class="inline-flex items-center text-primary-600 hover:text-primary-700 \
font-medium text-sm transition-colors">
          ${readMoreLabel}
          <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" \
viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" \
stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>
    `;

    // stitch it all together
    return `
      <div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow \
duration-300 overflow-hidden">
        <div class="p-6">
          <div class="flex items-start justify-between mb-4">
            <div class="flex-1">
              ${nameHeading}
              ${subTitle}
            </div>
            ${badge}
          </div>
          
          <div class="space-y-2 text-sm text-secondary-600">
            ${locationLine}
            ${dateLine}
          </div>
          
          ${readMoreLink}
        </div>
      </div>
    `;
  }).join('');
}

</script>